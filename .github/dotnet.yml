# Optimized workflow to minimize GitHub Actions usage
name: .NET Auto Build & Release

on:
  push:
    branches: ["main"]
    paths-ignore:
      - '**.md'
      - '.github/**'
      - 'docs/**'
  pull_request:
    branches: ["main"]
    paths-ignore:
      - '**.md'
      - '.github/**'
      - 'docs/**'

env:
  PROJECT_PATH: "HLTV_VoiceFix.csproj"
  PROJECT_NAME: "HLTV_VoiceFix"
  OUTPUT_PATH: "./HLTV_VoiceFix"
  BASE_VERSION: "3.0.0"

permissions:
  contents: write
  pull-requests: write

jobs:
  # Combine version calculation and build into single job to save minutes
  build-and-release:
    runs-on: ubuntu-latest
    if: github.repository_owner == 'zhwlrq' # Only run for your repo
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Calculate Version & Check Changes
      id: version
      run: |
        BASE_VERSION="${{ env.BASE_VERSION }}"
        CURRENT_VERSION=""
        SHOULD_RELEASE="false"
        IS_PRERELEASE="false"
        
        # Get latest tag
        LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null | sed 's/^v//' || echo "$BASE_VERSION")
        CURRENT_VERSION="$LATEST_TAG"
        
        echo "Current version: $CURRENT_VERSION"
        
        # Parse version
        IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
        
        if [ "${{ github.event_name }}" == "pull_request" ]; then
          NEW_VERSION="$CURRENT_VERSION-pr${{ github.event.number }}"
          IS_PRERELEASE="true"
          SHOULD_RELEASE="true"
        else
          # Check commits since last tag
          if git describe --tags --abbrev=0 >/dev/null 2>&1; then
            COMMITS=$(git log $(git describe --tags --abbrev=0)..HEAD --oneline | wc -l)
          else
            COMMITS=1
          fi
          
          if [ "$COMMITS" -gt 0 ]; then
            # Get recent commit messages
            RECENT_COMMITS=$(git log -5 --pretty=format:"%s" --no-merges)
            
            if echo "$RECENT_COMMITS" | grep -qiE "^(feat|feature)(\(.+\))?!:|BREAKING|breaking"; then
              MAJOR=$((MAJOR + 1)); MINOR=0; PATCH=0
            elif echo "$RECENT_COMMITS" | grep -qiE "^(feat|feature)(\(.+\))?:"; then
              MINOR=$((MINOR + 1)); PATCH=0  
            else
              PATCH=$((PATCH + 1))
            fi
            
            NEW_VERSION="$MAJOR.$MINOR.$PATCH"
            SHOULD_RELEASE="true"
          else
            NEW_VERSION="$CURRENT_VERSION"
          fi
        fi
        
        echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
        echo "should-release=$SHOULD_RELEASE" >> $GITHUB_OUTPUT
        echo "is-prerelease=$IS_PRERELEASE" >> $GITHUB_OUTPUT
        echo "current-version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
        
        echo "New version: $NEW_VERSION"
        echo "Should release: $SHOULD_RELEASE"

    - name: Update Source Version
      if: steps.version.outputs.should-release == 'true' && github.event_name == 'push'
      run: |
        NEW_VERSION="${{ steps.version.outputs.version }}"
        
        # Find and update ModuleVersion
        find . -name "*.cs" -exec grep -l "ModuleVersion.*=>" {} \; | head -1 | while read file; do
          if [ -f "$file" ]; then
            echo "Updating $file"
            sed -i "s/ModuleVersion.*=>.*\"[0-9]*\.[0-9]*\.[0-9]*\"/ModuleVersion => \"$NEW_VERSION\"/g" "$file"
            echo "✅ Updated to version $NEW_VERSION"
          fi
        done

    - name: Commit Version Update
      if: steps.version.outputs.should-release == 'true' && github.event_name == 'push'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        if ! git diff --quiet; then
          git add -A
          git commit -m "chore: bump version to ${{ steps.version.outputs.version }} [skip ci]"
          git push
        fi

    - name: Setup .NET
      if: steps.version.outputs.should-release == 'true'
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x

    - name: Build
      if: steps.version.outputs.should-release == 'true'
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        echo "Building version: $VERSION"
        
        dotnet restore
        dotnet build ${{ env.PROJECT_PATH }} -c Release -o ${{ env.OUTPUT_PATH }} -p:Version=$VERSION

    - name: Create Package
      if: steps.version.outputs.should-release == 'true'
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        
        # Create install instructions
        cat > ${{ env.OUTPUT_PATH }}/README.md << EOF
        # HLTV VoiceFix v$VERSION
        
        ## Installation
        Place the HLTV_VoiceFix folder in: \`game/csgo/addons/counterstrikesharp/plugins/\`
        
        ## Build Info
        - Version: $VERSION
        - Built: $(date -u +"%Y-%m-%d %H:%M UTC")
        - Commit: $(git rev-parse --short HEAD)
        EOF
        
        # Create zip
        cd ${{ env.OUTPUT_PATH }}
        zip -r ../${{ env.PROJECT_NAME }}-$VERSION.zip .
        cd ..

    - name: Generate Simple Changelog
      if: steps.version.outputs.should-release == 'true'
      id: changelog
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        
        cat > changelog.txt << EOF
        🚀 HLTV VoiceFix v$VERSION
        
        📥 Installation: Place HLTV_VoiceFix folder in game/csgo/addons/counterstrikesharp/plugins/
        
        🔄 Recent Changes:
        $(git log -5 --pretty=format:"• %s" --no-merges)
        
        ℹ️ Build: $(date -u +"%Y-%m-%d %H:%M UTC") | Commit: $(git rev-parse --short HEAD)
        EOF
        
        {
          echo 'CHANGELOG<<EOF'
          cat changelog.txt  
          echo EOF
        } >> $GITHUB_OUTPUT

    - name: Create Release
      if: steps.version.outputs.should-release == 'true'
      uses: ncipollo/release-action@v1.12.0
      with:
        artifacts: ${{ env.PROJECT_NAME }}-${{ steps.version.outputs.version }}.zip
        name: "v${{ steps.version.outputs.version }}"
        tag: "v${{ steps.version.outputs.version }}"
        body: ${{ steps.changelog.outputs.CHANGELOG }}
        prerelease: ${{ steps.version.outputs.is-prerelease }}
        makeLatest: ${{ github.event_name == 'push' }}
        
  # Enhanced auto-merge for dependencies and CS# updates
  auto-merge:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && (github.actor == 'dependabot[bot]' || contains(github.event.pull_request.labels.*.name, 'counterstrikesharp'))
    steps:
    - name: Get PR metadata
      id: metadata
      run: |
        # Check if it's a dependabot PR
        if [ "${{ github.actor }}" = "dependabot[bot]" ]; then
          echo "pr-type=dependabot" >> $GITHUB_OUTPUT
        elif echo '${{ toJson(github.event.pull_request.labels.*.name) }}' | grep -q "counterstrikesharp"; then
          echo "pr-type=counterstrikesharp" >> $GITHUB_OUTPUT
        else
          echo "pr-type=unknown" >> $GITHUB_OUTPUT
        fi
        
        # Check if title contains CS# update
        if echo "${{ github.event.pull_request.title }}" | grep -qi "counterstrikesharp"; then
          echo "is-cs-update=true" >> $GITHUB_OUTPUT
        else
          echo "is-cs-update=false" >> $GITHUB_OUTPUT
        fi

    - name: Dependabot metadata
      if: github.actor == 'dependabot[bot]'
      id: dependabot
      uses: dependabot/fetch-metadata@v1
      with:
        github-token: "${{ secrets.GITHUB_TOKEN }}"

    - name: Auto-approve safe updates
      run: |
        # Auto-approve conditions:
        # 1. Dependabot patch/minor updates
        # 2. CounterStrikeSharp updates (if build passes)
        
        if [ "${{ github.actor }}" = "dependabot[bot]" ]; then
          if [ "${{ steps.dependabot.outputs.update-type }}" != "version-update:semver-major" ]; then
            echo "✅ Auto-approving Dependabot ${{ steps.dependabot.outputs.update-type }} update"
            gh pr review --approve "${{ github.event.pull_request.html_url }}" \
              --body "✅ Auto-approved safe dependency update"
          fi
        elif [ "${{ steps.metadata.outputs.is-cs-update }}" = "true" ]; then
          echo "✅ Auto-approving CounterStrikeSharp update"
          gh pr review --approve "${{ github.event.pull_request.html_url }}" \
            --body "✅ Auto-approved CounterStrikeSharp update - build tests will verify compatibility"
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Enable auto-merge
      run: |
        # Enable auto-merge for approved updates
        if [ "${{ github.actor }}" = "dependabot[bot]" ] && [ "${{ steps.dependabot.outputs.update-type }}" != "version-update:semver-major" ]; then
          echo "🤖 Enabling auto-merge for Dependabot update"
          gh pr merge --auto --squash "${{ github.event.pull_request.html_url }}"
        elif [ "${{ steps.metadata.outputs.is-cs-update }}" = "true" ]; then
          echo "🚀 Enabling auto-merge for CounterStrikeSharp update"
          gh pr merge --auto --squash "${{ github.event.pull_request.html_url }}"
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Add CS# update label
      if: steps.metadata.outputs.is-cs-update == 'true'
      run: |
        gh pr edit "${{ github.event.pull_request.html_url }}" \
          --add-label "counterstrikesharp,auto-update,dependencies"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}