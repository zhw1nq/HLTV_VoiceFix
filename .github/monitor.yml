# Monitor CounterStrikeSharp updates and auto-create PRs
name: CS# Version Monitor

on:
  schedule:
    # Check for updates twice daily
    - cron: '0 6,18 * * *'  # 6 AM and 6 PM UTC
  workflow_dispatch:  # Manual trigger
    inputs:
      force_check:
        description: 'Force check even if no changes'
        required: false
        default: 'false'

env:
  CS_GITHUB_REPO: "roflmuffin/CounterStrikeSharp"
  CS_NUGET_PACKAGE: "CounterStrikeSharp.API"

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  check-cs-updates:
    runs-on: ubuntu-latest
    outputs:
      has-update: ${{ steps.check.outputs.has-update }}
      latest-version: ${{ steps.check.outputs.latest-version }}
      current-version: ${{ steps.check.outputs.current-version }}
      release-notes: ${{ steps.check.outputs.release-notes }}
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x

    - name: Check CounterStrikeSharp Updates
      id: check
      run: |
        echo "🔍 Checking for CounterStrikeSharp updates..."
        
        # Get current version from project file
        CURRENT_VERSION=""
        if [ -f "HLTV_VoiceFix.csproj" ]; then
          CURRENT_VERSION=$(grep -oP 'CounterStrikeSharp[^"]*" Version="\K[^"]*' HLTV_VoiceFix.csproj | head -1)
        fi
        
        if [ -z "$CURRENT_VERSION" ]; then
          # Try to get from packages.config or other sources
          CURRENT_VERSION=$(dotnet list package --include-prerelease | grep -i counterstrikesharp | awk '{print $3}' | head -1)
        fi
        
        if [ -z "$CURRENT_VERSION" ]; then
          CURRENT_VERSION="unknown"
        fi
        
        echo "Current CS# version: $CURRENT_VERSION"
        
        # Get latest version from GitHub releases
        LATEST_RELEASE=$(curl -s "https://api.github.com/repos/${{ env.CS_GITHUB_REPO }}/releases/latest")
        LATEST_VERSION=$(echo "$LATEST_RELEASE" | jq -r '.tag_name // "unknown"' | sed 's/^v//')
        
        # Get latest from NuGet as backup
        if [ "$LATEST_VERSION" = "unknown" ] || [ "$LATEST_VERSION" = "null" ]; then
          echo "Checking NuGet for latest version..."
          NUGET_INFO=$(curl -s "https://api.nuget.org/v3-flatcontainer/${{ env.CS_NUGET_PACKAGE }}/index.json")
          LATEST_VERSION=$(echo "$NUGET_INFO" | jq -r '.versions[-1] // "unknown"')
        fi
        
        echo "Latest CS# version: $LATEST_VERSION"
        
        # Compare versions
        HAS_UPDATE="false"
        if [ "$CURRENT_VERSION" != "$LATEST_VERSION" ] && [ "$LATEST_VERSION" != "unknown" ]; then
          # Simple version comparison (works for most cases)
          if [ "$CURRENT_VERSION" != "unknown" ]; then
            # Use sort -V for version comparison
            NEWER=$(printf '%s\n%s' "$CURRENT_VERSION" "$LATEST_VERSION" | sort -V | tail -n1)
            if [ "$NEWER" = "$LATEST_VERSION" ] && [ "$CURRENT_VERSION" != "$LATEST_VERSION" ]; then
              HAS_UPDATE="true"
            fi
          else
            HAS_UPDATE="true"
          fi
        fi
        
        # Force update if requested
        if [ "${{ github.event.inputs.force_check }}" = "true" ]; then
          HAS_UPDATE="true"
        fi
        
        # Get release notes
        RELEASE_NOTES=""
        if [ "$HAS_UPDATE" = "true" ]; then
          RELEASE_NOTES=$(echo "$LATEST_RELEASE" | jq -r '.body // "No release notes available"' | head -20)
        fi
        
        echo "has-update=$HAS_UPDATE" >> $GITHUB_OUTPUT
        echo "latest-version=$LATEST_VERSION" >> $GITHUB_OUTPUT
        echo "current-version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
        
        # Multi-line output for release notes
        {
          echo 'release-notes<<EOF'
          echo "$RELEASE_NOTES"
          echo EOF
        } >> $GITHUB_OUTPUT
        
        echo "Has update: $HAS_UPDATE"

  create-update-pr:
    runs-on: ubuntu-latest
    needs: check-cs-updates
    if: needs.check-cs-updates.outputs.has-update == 'true'
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x

    - name: Create update branch
      run: |
        BRANCH_NAME="update-cs-${{ needs.check-cs-updates.outputs.latest-version }}"
        git checkout -b "$BRANCH_NAME"
        echo "branch-name=$BRANCH_NAME" >> $GITHUB_ENV

    - name: Update CounterStrikeSharp version
      run: |
        LATEST_VERSION="${{ needs.check-cs-updates.outputs.latest-version }}"
        CURRENT_VERSION="${{ needs.check-cs-updates.outputs.current-version }}"
        
        echo "Updating CS# from $CURRENT_VERSION to $LATEST_VERSION"
        
        # Update project file
        if [ -f "HLTV_VoiceFix.csproj" ]; then
          # Try different patterns for updating CS# version
          sed -i "s/CounterStrikeSharp[^\"]*\" Version=\"[^\"]*\"/CounterStrikeSharp.API\" Version=\"$LATEST_VERSION\"/g" HLTV_VoiceFix.csproj
          
          # Also try PackageReference pattern
          sed -i "s/<PackageReference Include=\"CounterStrikeSharp[^\"]*\" Version=\"[^\"]*\"/<PackageReference Include=\"CounterStrikeSharp.API\" Version=\"$LATEST_VERSION\"/g" HLTV_VoiceFix.csproj
        fi
        
        # Try to update via dotnet CLI as well
        dotnet remove package CounterStrikeSharp.API 2>/dev/null || true
        dotnet add package CounterStrikeSharp.API --version $LATEST_VERSION
        
        # Restore to check if everything works
        dotnet restore

    - name: Test build
      run: |
        echo "Testing build with new CS# version..."
        dotnet build HLTV_VoiceFix.csproj -c Release --verbosity minimal
        
        if [ $? -eq 0 ]; then
          echo "✅ Build successful with CS# ${{ needs.check-cs-updates.outputs.latest-version }}"
        else
          echo "❌ Build failed with CS# ${{ needs.check-cs-updates.outputs.latest-version }}"
          exit 1
        fi

    - name: Update changelog or docs
      run: |
        LATEST_VERSION="${{ needs.check-cs-updates.outputs.latest-version }}"
        
        # Create or update CHANGELOG.md
        if [ ! -f "CHANGELOG.md" ]; then
          cat > CHANGELOG.md << EOF
        # Changelog
        
        ## [Unreleased]
        - Updated CounterStrikeSharp to v$LATEST_VERSION
        
        EOF
        else
          # Add entry to existing changelog
          sed -i "/## \[Unreleased\]/a - Updated CounterStrikeSharp to v$LATEST_VERSION" CHANGELOG.md
        fi

    - name: Commit changes
      run: |
        LATEST_VERSION="${{ needs.check-cs-updates.outputs.latest-version }}"
        
        git config --local user.email "action@github.com"
        git config --local user.name "CS# Update Bot"
        
        git add -A
        git commit -m "feat: update CounterStrikeSharp to v$LATEST_VERSION

        - Automated update from CS# Monitor workflow
        - Build tested successfully
        - Updated project dependencies"

    - name: Push branch
      run: |
        git push origin ${{ env.branch-name }}

    - name: Create Pull Request
      run: |
        LATEST_VERSION="${{ needs.check-cs-updates.outputs.latest-version }}"
        CURRENT_VERSION="${{ needs.check-cs-updates.outputs.current-version }}"
        
        # Prepare release notes (escape for JSON)
        RELEASE_NOTES="${{ needs.check-cs-updates.outputs.release-notes }}"
        ESCAPED_NOTES=$(echo "$RELEASE_NOTES" | jq -Rs . | tr -d '"')
        
        PR_BODY="## 🚀 CounterStrikeSharp Update: v$LATEST_VERSION

        This PR automatically updates CounterStrikeSharp from \`$CURRENT_VERSION\` to \`$LATEST_VERSION\`.

        ### ✅ Automated Checks
        - [x] Build test passed
        - [x] Dependencies updated
        - [x] Project file modified

        ### 📋 Release Notes
        \`\`\`
        $ESCAPED_NOTES
        \`\`\`

        ### 🔗 Links
        - [CS# Release](https://github.com/${{ env.CS_GITHUB_REPO }}/releases/tag/v$LATEST_VERSION)
        - [NuGet Package](https://www.nuget.org/packages/${{ env.CS_NUGET_PACKAGE }}/$LATEST_VERSION)

        ### 🤖 Auto-generated
        This PR was automatically created by the CS# Monitor workflow.
        
        **Review and merge when ready!**"
        
        gh pr create \
          --title "feat: update CounterStrikeSharp to v$LATEST_VERSION" \
          --body "$PR_BODY" \
          --head "${{ env.branch-name }}" \
          --base "main" \
          --label "dependencies,counterstrikesharp,auto-update"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Auto-approve if minor/patch update
      run: |
        LATEST_VERSION="${{ needs.check-cs-updates.outputs.latest-version }}"
        CURRENT_VERSION="${{ needs.check-cs-updates.outputs.current-version }}"
        
        # Simple check for minor/patch updates (not breaking changes)
        if echo "$LATEST_VERSION" | grep -qE "^[0-9]+\.[0-9]+\.[0-9]+"; then
          echo "Detected semantic version, checking update type..."
          
          # Get the PR number
          PR_NUMBER=$(gh pr list --head "${{ env.branch-name }}" --json number -q '.[0].number')
          
          if [ ! -z "$PR_NUMBER" ]; then
            echo "Auto-approving PR #$PR_NUMBER for CS# update"
            gh pr review $PR_NUMBER --approve --body "✅ Auto-approved CounterStrikeSharp update. Build tests passed."
            
            # Auto-merge if it's a patch/minor update
            echo "Setting auto-merge for PR #$PR_NUMBER"
            gh pr merge $PR_NUMBER --auto --squash
          fi
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  notify-update:
    runs-on: ubuntu-latest
    needs: [check-cs-updates, create-update-pr]
    if: always() && needs.check-cs-updates.outputs.has-update == 'true'
    steps:
    - name: Create issue for manual review (if PR creation failed)
      if: needs.create-update-pr.result == 'failure'
      run: |
        LATEST_VERSION="${{ needs.check-cs-updates.outputs.latest-version }}"
        
        gh issue create \
          --title "⚠️ CounterStrikeSharp v$LATEST_VERSION Update Failed" \
          --body "The automatic update to CounterStrikeSharp v$LATEST_VERSION failed.
        
        Please manually update the dependency and check for breaking changes.
        
        **Latest version:** $LATEST_VERSION
        **Current version:** ${{ needs.check-cs-updates.outputs.current-version }}
        
        **Release notes:**
        \`\`\`
        ${{ needs.check-cs-updates.outputs.release-notes }}
        \`\`\`" \
          --label "bug,counterstrikesharp,manual-action-required"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  cleanup-old-branches:
    runs-on: ubuntu-latest
    if: always()
    steps:
    - name: Cleanup old update branches
      run: |
        echo "Cleaning up old CS# update branches..."
        
        # Get branches that match update-cs-* pattern and are older than 7 days
        OLD_BRANCHES=$(gh api repos/${{ github.repository }}/branches \
          --jq '.[] | select(.name | test("^update-cs-")) | select(.commit.commit.author.date | fromdateiso8601 < (now - 7*24*3600)) | .name')
        
        for branch in $OLD_BRANCHES; do
          echo "Deleting old branch: $branch"
          git push origin --delete "$branch" || true
        done
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}